; String theory edge cases that trigger parser bugs
(set-logic QF_S)

; ========================================
; Section 1: Special String Contents
; ========================================

; Empty string
(declare-const empty String)
(assert (= empty ""))

; String with quotes
(declare-const quoted String)
(assert (= quoted """"))

; String with escape sequences  
(declare-const escaped String)
(assert (= escaped "\n\t\r\\"))

; String with unicode
(declare-const unicode String)
(assert (= unicode "café"))

; Very long string
(declare-const long_str String)
(assert (= long_str "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"))

; ========================================
; Section 2: String Operations Edge Cases
; ========================================

; String length of empty string
(assert (= (str.len empty) 0))

; Substring at boundaries
(declare-const test_str String)
(assert (= test_str "hello"))
(assert (= (str.substr test_str 0 0) ""))
(assert (= (str.substr test_str 5 0) ""))

; String contains empty string
(assert (str.contains test_str ""))

; String indexof with empty string
(assert (= (str.indexof test_str "" 0) 0))

; ========================================
; Section 3: Regular Expression Edge Cases
; ========================================

; Empty regex
(assert (str.in_re empty (str.to_re "")))

; Regex with special characters
(assert (str.in_re "." (str.to_re ".")))

; Kleene star with empty
(assert (str.in_re "" (re.* (str.to_re "a"))))


; instance00000.smt2
(set-info :source |
Generated by: Murphy Berzish, Mitja Kulczynski, Federico Mora, Florin Manea, Joel Day, Dirk Nowotka, Vijay Ganesh, Zhengyang Lu
Generated on: 2020-10-01
Description: Translated from a collection of real-world regex queries, AutomataArk, collected by Loris D’Antoni and Fang Wang: https://github.com/lorisdanto/automatark
Application: Evaluate solvers on real-world regex queries
Target solver: Z3str3RE, CVC4, OSTRICH, Z3seq, Z3str3, Z3-Trau
Publications: Berzish, M., Kulczynski, M., Mora, F., Manea, F., Day, J. D., Nowotka, D., & Ganesh, V. (2021, July). An SMT solver for regular expressions and linear arithmetic over string length. In CAV 2021.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)

(declare-const X String)
(assert (not (str.in_re X (re.++ (str.to_re "SK") (re.union (re.++ ((_ re.loop 2 2) (re.range "0" "9")) (str.to_re " ") ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re " ") ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re " ") ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re " ") ((_ re.loop 4 4) (re.range "0" "9")) (str.to_re " ") ((_ re.loop 4 4) (re.range "0" "9"))) (re.++ ((_ re.loop 22 22) (re.range "0" "9")) (str.to_re "\u{a}")))))))


(check-sat)
(exit)