(set-logic QF_FP)
(set-info :status unsat)
(define-sort FPN () (_ FloatingPoint 11 53))
(declare-fun x () FPN)
(declare-fun r () FPN)
(assert (= x (fp #b0 #b11110100101 #b1101110100011010101010110100010100010100010101100110)))
(assert (= r (fp #b0 #b11110100101 #b1101110100011010101010110100010100010100010101100110)))
(assert  (not (= (fp.abs x) r)))

; double_req_bl_0971_true-unreach-call.c_0.smt2
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(declare-fun v_currentRoundingMode_7_const_205912936 () RoundingMode)
(declare-fun v___ieee754_log10_~y~0_2_const_74741918 () (_ FloatingPoint 11 53))
(declare-fun v_~log10_2lo_log10~0_1_const_-1906172200 () (_ FloatingPoint 11 53))
(declare-fun v_~ivln10_log10~0_1_const_-607855457 () (_ FloatingPoint 11 53))
(declare-fun |v___ieee754_log10_#t~ret16_3_const_-2022184893| () (_ FloatingPoint 11 53))
(declare-fun v___ieee754_log10_~z~1_1_const_73815391 () (_ FloatingPoint 11 53))
(declare-fun v_~log10_2hi_log10~0_1_const_307026142 () (_ FloatingPoint 11 53))
(declare-fun |v___ieee754_log10_#res_2_const_-1465748562| () (_ FloatingPoint 11 53))
(assert (and (= |v___ieee754_log10_#res_2_const_-1465748562| (fp.add v_currentRoundingMode_7_const_205912936 v___ieee754_log10_~z~1_1_const_73815391 (fp.mul v_currentRoundingMode_7_const_205912936 v___ieee754_log10_~y~0_2_const_74741918 v_~log10_2hi_log10~0_1_const_307026142))) (= v___ieee754_log10_~z~1_1_const_73815391 (fp.add v_currentRoundingMode_7_const_205912936 (fp.mul v_currentRoundingMode_7_const_205912936 v___ieee754_log10_~y~0_2_const_74741918 v_~log10_2lo_log10~0_1_const_-1906172200) (fp.mul v_currentRoundingMode_7_const_205912936 v_~ivln10_log10~0_1_const_-607855457 |v___ieee754_log10_#t~ret16_3_const_-2022184893|)))))

(assert (fp.isNaN (_ NaN 11 53)))
(assert (fp.isNaN (_ +NaN 11 53)))
(assert (fp.isNaN (_ -NaN 11 53)))
(assert (fp.isInfinite (_ +oo 11 53)))
(assert (fp.isInfinite (_ -oo 11 53)))

; double_req_bl_0240a_true-unreach-call.c_5.smt2.FOL.999.smt2
(set-info :source "|
Generated by the tool Ultimate Automizer [1,2] which implements
an automata theoretic approach [3] to software verification.

This SMT script belongs to a set of SMT scripts that was generated by
applying Ultimate Automizer to benchmarks [4] from the SV-COMP 2019 [5,6].
This script might _not_ contain all SMT commands that are used by
Ultimate Automizer. In order to satisfy the restrictions of
the SMT-COMP we have to drop e.g., the commands for getting
values (resp. models), unsatisfiable cores and interpolants.

2019-04-27, Matthias Heizmann (heizmann@informatik.uni-freiburg.de)

[1] https://ultimate.informatik.uni-freiburg.de/automizer/
[2] Matthias Heizmann, Yu-Fang Chen, Daniel Dietsch, Marius Greitschus,
     Jochen Hoenicke, Yong Li, Alexander Nutz, Betim Musa, Christian
     Schilling, Tanja Schindler, Andreas Podelski: Ultimate Automizer
     and the Search for Perfect Interpolants - (Competition Contribution).
     TACAS (2) 2018: 447-451
[3] Matthias Heizmann, Jochen Hoenicke, Andreas Podelski: Software Model
     Checking for People Who Love Automata. CAV 2013:36-52
[4] https://github.com/sosy-lab/sv-benchmarks
[5] Dirk Beyer: Automatic Verification of C and Java Programs: SV-COMP 2019.
     TACAS (3) 2019: 133-155
[6] https://sv-comp.sosy-lab.org/2019/
|")
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun c_currentRoundingMode () RoundingMode)
(declare-fun c_~S2_ksin~0 () (_ FloatingPoint 11 53))
(declare-fun c_~S3_ksin~0 () (_ FloatingPoint 11 53))
(declare-fun c_~S4_ksin~0 () (_ FloatingPoint 11 53))
(declare-fun c_~S5_ksin~0 () (_ FloatingPoint 11 53))
(declare-fun c_~S6_ksin~0 () (_ FloatingPoint 11 53))
(declare-fun |c_sin_double_#in~x| () (_ FloatingPoint 11 53))
(declare-fun c_sin_double_~x () (_ FloatingPoint 11 53))
(declare-fun c___kernel_sin_~x () (_ FloatingPoint 11 53))
(declare-fun c___kernel_sin_~z~3_primed () (_ FloatingPoint 11 53))
(declare-fun c___kernel_sin_~r~2_primed () (_ FloatingPoint 11 53))
(declare-fun c___kernel_sin_~v~0_primed () (_ FloatingPoint 11 53))
(assert (and (= c___kernel_sin_~z~3_primed (fp.mul c_currentRoundingMode c___kernel_sin_~x c___kernel_sin_~x)) (= c___kernel_sin_~r~2_primed (fp.add c_currentRoundingMode c_~S2_ksin~0 (fp.mul c_currentRoundingMode c___kernel_sin_~z~3_primed (fp.add c_currentRoundingMode c_~S3_ksin~0 (fp.mul c_currentRoundingMode c___kernel_sin_~z~3_primed (fp.add c_currentRoundingMode c_~S4_ksin~0 (fp.mul c_currentRoundingMode c___kernel_sin_~z~3_primed (fp.add c_currentRoundingMode c_~S5_ksin~0 (fp.mul c_currentRoundingMode c___kernel_sin_~z~3_primed c_~S6_ksin~0))))))))) (= c___kernel_sin_~v~0_primed (fp.mul c_currentRoundingMode c___kernel_sin_~z~3_primed c___kernel_sin_~x))))
(assert (not (or (not (let ((.cse0 (fp.sub c_currentRoundingMode c_sin_double_~x c_sin_double_~x))) (fp.eq .cse0 .cse0))) (let ((.cse1 (fp.sub c_currentRoundingMode |c_sin_double_#in~x| |c_sin_double_#in~x|))) (fp.eq .cse1 .cse1)))))
(check-sat)
(exit)